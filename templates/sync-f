server {
    listen 80;

    server_name 5.375.ru {{ sync_pub_dom_sync_f }};

    location /.well-known/acme-challenge/ {
        alias /var/www/challenges/;
        try_files $uri =404;
    }

    location = /test-b {
        echo "test B";
    }

    location / {
        return 301 https://$host$request_uri;
    }

    access_log /var/log/nginx/sync-f-access.log;
    error_log /var/log/nginx/sync-f-error.log;
}

map $http_cookie $test_dir {
    default "bpsync_447";
#    "~test_ver=act" "bpsync_act"; # act-exec-works
#    "~test_ver=stamp" "bpsync_stamp"; # stamp & sign
#    "~test_ver=580" "bpsync_580";
    "~test_ver=447" "bpsync_447";
    "~test_ver=570" "bpsync_570";
}

server {
    listen virbr.alias:80;

    server_name sync-f-api.virbr.{{ sync_int_dom }};

    client_max_body_size 8m;

    location / {
        return 404;
    }

    location /api {
        allow 192.168.0.0/16;
        allow 10.192.168.0/24;
        deny all;

        try_files $uri /index.php$is_args$args;
    }

    location ~ ^/index\.php(/|$) {
            fastcgi_pass unix:/mnt/export/sync-f/run/php/php7.3-fpm.sock;
            fastcgi_split_path_info ^(.+\.php)(/.*)$;
            include fastcgi_params;

            fastcgi_param SCRIPT_FILENAME /var/www/$test_dir/public$fastcgi_script_name;
            fastcgi_param DOCUMENT_ROOT /var/www/$test_dir/public;
            # Prevents URIs that include the front controller. This will 404:
            # http://domain.tld/index.php/some-path
            # Remove the internal directive to allow URIs like this
            internal;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    error_log /var/log/nginx/sync-f-api-error.log;
    access_log /var/log/nginx/sync-f-api-access.log timed_combined;
}

server {
    listen virbr.alias:80;
    listen 443 ssl;

    server_name 5.375.ru sync-f.virbr.{{ sync_int_dom }} {{ sync_pub_dom_sync_f }};

    include /var/lib/acme/domains/{{ sync_pub_dom_sync_f }}-nginx-keys.conf*;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;
    ssl_session_cache shared:SSL:50m;
    ssl_dhparam /var/lib/acme/dhparam.pem;
    ssl_prefer_server_ciphers on;

    root /mnt/export/sync-f/root/var/www/$test_dir/public;

    client_max_body_size 8m;

    location ~* \.(jpg|jpeg|gif|png|ico|css|bmp|swf|js|map|html|txt|eot|svg|ttf|woff|woff2)$ {
        root /mnt/export/sync-f/root/var/www/$test_dir/public;

        error_log /var/log/nginx/bpsync_static_error.log;
        access_log /var/log/nginx/bpsync_static_access.log;
    }

    location / {
        # try to serve file directly, fallback to app.php
        try_files $uri /index.php$is_args$args;
    }

    location /api {
        return 403;
    }

#   # DEV
#   # This rule should only be placed on your development environment
#   # In production, don't include this and don't deploy app_dev.php or config.php
#   location ~ ^/(app_dev|config)\.php(/|$) {
#       fastcgi_pass unix:/mnt/export/sync-f/run/php/php7.3-fpm.sock;
#       fastcgi_split_path_info ^(.+\.php)(/.*)$;
#       include fastcgi_params;
#
#       # When you are using symlinks to link the document root to the
#       # current version of your application, you should pass the real
#       # application path instead of the path to the symlink to PHP
#       # FPM.
#       # Otherwise, PHP's OPcache may not properly detect changes to
#       # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
#       # for more information).
#       fastcgi_param SCRIPT_FILENAME /var/www/$test_dir/web$fastcgi_script_name;
#       fastcgi_param DOCUMENT_ROOT /var/www/$test_dir/web;
#   }

#    # PROD
#    location ~ ^/app\.php(/|$) {
#        fastcgi_pass unix:/mnt/export/sync-f/run/php/php7.3-fpm.sock;
#        fastcgi_split_path_info ^(.+\.php)(/.*)$;
#        include fastcgi_params;
#
#        # When you are using symlinks to link the document root to the
#        # current version of your application, you should pass the real
#        # application path instead of the path to the symlink to PHP
#        # FPM.
#        # Otherwise, PHP's OPcache may not properly detect changes to
#        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
#        # for more information).
#        fastcgi_param SCRIPT_FILENAME /var/www/$test_dir/web$fastcgi_script_name;
#        fastcgi_param DOCUMENT_ROOT /var/www/$test_dir/web;
#
#        # Prevents URIs that include the front controller. This will 404:
#        # http://domain.tld/app.php/some-path
#        # Remove the internal directive to allow URIs like this
#        internal;
#    }

        location ~ ^/index\.php(/|$) {
            fastcgi_pass unix:/mnt/export/sync-f/run/php/php7.3-fpm.sock;
            fastcgi_split_path_info ^(.+\.php)(/.*)$;
            include fastcgi_params;

            # optionally set the value of the environment variables used in the application
            # fastcgi_param APP_ENV prod;
            # fastcgi_param APP_SECRET <app-secret-id>;
            # fastcgi_param DATABASE_URL "mysql://db_user:db_pass@host:3306/db_name";

            # When you are using symlinks to link the document root to the
            # current version of your application, you should pass the real
            # application path instead of the path to the symlink to PHP
            # FPM.
            # Otherwise, PHP's OPcache may not properly detect changes to
            # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
            # for more information).
            # Caveat: When PHP-FPM is hosted on a different machine from nginx
            #         $realpath_root may not resolve as you expect! In this case try using
            #         $document_root instead.
            fastcgi_param SCRIPT_FILENAME /var/www/$test_dir/public$fastcgi_script_name;
            fastcgi_param DOCUMENT_ROOT /var/www/$test_dir/public;
            # Prevents URIs that include the front controller. This will 404:
            # http://domain.tld/index.php/some-path
            # Remove the internal directive to allow URIs like this
            internal;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    error_log /var/log/nginx/sync-f-error.log;
    access_log /var/log/nginx/sync-f-access.log timed_combined;
}
