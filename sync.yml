- hosts: sync

  vars:
    ansible_ssh_user: "{{ sync_admin_user }}"
    ansible_ssh_pass: "{{ sync_admin_pass }}"
    ansible_become_password: "{{ sync_root_pass }}"
    ansible_host_key_checking: false

  tasks:
    - name: Set ssh key
      become: true
      become_method: su
      authorized_key:
        user: root
        state: present
        key: "{{ lookup('file', '~/.ssh/id_ed25519.pub') }}"

- hosts: sync

  vars:
    ansible_ssh_user: root
    sync_pub_dom_sync: "sync.{{ sync_pub_dom }}"
    sync_pub_dom_sync_f: "sync-f.{{ sync_pub_dom }}"

    sync_hd_list: "{{
      [
        {
          'name': 'fast',
          'dev': sync_hd_fast | default('')
        },
        {
          'name': 'big',
          'dev': sync_hd_big | default('')
        },
      ] | selectattr('dev', '!=', '') }}"

  roles:
    - common

  tasks:

    - name: Allow admin user exec sudo
      user:
        name: "{{ sync_admin_user }}"
        groups: adm,sudo
        append: true

    - name: Install parted
      apt:
        name: [parted, xfsprogs]
        state: present
        install_recommends: false
      when: (sync_hd_list | length) > 0

    - name: Create special partition
      parted:
        device: "/dev/{{ item.dev }}"
        label: gpt
        number: 1
        state: present
      loop: "{{ sync_hd_list }}"
      register: part_create

    - name: Create special filesystem
      filesystem:
        fstype: xfs
        dev: "/dev/{{ item.dev | regex_replace('^(.*[0-9])$', '\\1p') }}1"
        opts: -m rmapbt=1,reflink=1
      loop: "{{ sync_hd_list }}"

    - name: Update devices info
      setup:
        filter: ansible_devices
      when: ((sync_hd_list | length) > 0) and part_create.changed

    - name: Create special mount dir
      file:
        path: "/mnt/{{ item.name }}/vol0"
        state: directory
      loop: "{{ sync_hd_list }}"

    - name: Mount special dir
      mount:
        path: "/mnt/{{ item.name }}/vol0"
        src: "UUID={{ ansible_devices[item.dev]['partitions'][(item.dev | regex_replace('^(.*[0-9])$', '\\1p')) + '1']['uuid'] }}"
        fstype: xfs
        opts: defaults
        state: mounted
      loop: "{{ sync_hd_list }}"

    - name: Create special sync dir
      file:
        path: "/mnt/{{ item.name }}/vol0/sync"
        state: directory
      loop: "{{ sync_hd_list }}"

    - name: Install system packages
      apt:
        name: [psmisc, net-tools, socat, iptables, apparmor, openssl]
        state: present
        install_recommends: false

    - name: Config DHCP client
      blockinfile:
        dest: "/etc/dhcp/dhclient.conf"
        content: |
          supersede domain-name "{{ sync_int_dom }}";
          supersede domain-search "{{ sync_int_dom }}";
          supersede domain-name-servers 127.0.0.1;

    - name: Install DNS packages
      apt:
        name: [dnsmasq]
        state: present
        install_recommends: false

    - name: Creates LXC hosts directory
      file:
        path: /var/tmp/lxc-hosts
        state: directory

    - name: Config DNS server
      template:
        src: "./templates/dnsmasq.conf"
        dest: "/etc/dnsmasq.conf"
        owner: root
        mode: "0644"
      register: dnsmasq_conf

    - name: Restart DNS server A
      service:
        name: dnsmasq
        state: restarted
      when: dnsmasq_conf.changed

    - name: Remove resolveconf package
      apt:
        name: resolvconf
        state: absent
        install_recommends: false

    - name: Config resolv.conf
      copy:
        dest: "/etc/resolv.conf"
        owner: root
        mode: "0644"
        content: |
          domain {{ sync_int_dom }}
          search {{ sync_int_dom }}.
          nameserver 127.0.0.1

    - name: Config routing A
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes

    - name: Create run0 shared mount dir
      file:
        path: /mnt/shared/run0
        state: directory

    - name: Mount run0 shared dir
      mount:
        path: /mnt/shared/run0
        src: tmpfs
        fstype: tmpfs
        opts: "nofail,rw,noexec,nodev,nosuid,size=32M"
        state: mounted

    - name: Create LXC export dir
      file:
        path: /mnt/export
        state: directory

    - name: Create LXC export mount point
      mount:
        path: /mnt/export
        src: tmpfs
        fstype: tmpfs
        opts: "nofail,rw,size=16M,noexec,nodev,nosuid,gid=www-data,mode=775"
        state: mounted

    - name: Config LXC A
      copy:
        dest: "/etc/default/lxc-net"
        content: |
          USE_LXC_BRIDGE="false"
          #USE_LXC_BRIDGE="true"

          # Honor system's dnsmasq configuration
          #LXC_DHCP_CONFILE=/etc/dnsmasq.conf

    - name: Install container packages
      apt:
        name: [lxc, python3-lxc, bridge-utils, debootstrap, dirmngr, gnupg, lxcfs, lxc-templates, rsync, uidmap]
        state: present
        install_recommends: false

    - name: Config LXC AppArmor
      lineinfile:
        path: /etc/apparmor.d/abstractions/lxc/start-container
        insertbefore: BOF
        line: "  mount options=bind /var/lib/lxc/*/rootfs/ -> /mnt/export/*/root/ ,"
      register: lxc_aa_conf

    - name: Reload AppArmor
      command: apparmor_parser -r /etc/apparmor.d
      when: lxc_aa_conf.changed

    - name: Config LXC B
      copy:
        dest: "/etc/lxc/default.conf"
        content: |
          lxc.net.0.type = veth
          lxc.net.0.link = virbr0
          lxc.net.0.flags = up
          #lxc.net.0.ipv4.gateway = 192.168.{{ sync_net_ip_base }}.1

          lxc.apparmor.profile = generated
          lxc.apparmor.allow_nesting = 1

    - name: Install LXC hooks script
      template:
        src: "./templates/lxc-hooks.sh"
        dest: "/usr/local/bin/lxc-hooks.sh"
        owner: root
        mode: "0755"

    - name: Install LXC monitor watch script
      template:
        src: "./templates/lxc-monitor-watch.sh"
        dest: "/usr/local/bin/lxc-monitor-watch.sh"
        owner: root
        mode: "0755"
      register: lxc_monitor_watch_script

    - name: Install LXC monitor watch service
      template:
        src: "./templates/lxc-monitor-watch.service"
        dest: "/etc/systemd/system/lxc-monitor-watch.service"
        owner: root
        mode: "0644"

    - name: Start LXC monitor watch service
      systemd:
        name: lxc-monitor-watch
        enabled: true
        state: started
      register: lxc_monitor_watch_start

    - name: Retart LXC monitor watch service
      service:
        name: lxc-monitor-watch
        state: restarted
      when: lxc_monitor_watch_script.changed and (not lxc_monitor_watch_start.changed)

    - name: Setup container bridge interface
      copy:
        dest: "/etc/network/interfaces.d/virbr0"
        owner: root
        mode: "0644"
        content: |
          auto virbr0
          iface virbr0 inet static
                  bridge_ports none
                  address 192.168.{{ sync_net_ip_base }}.1
                  broadcast 192.168.{{ sync_net_ip_base }}.255
                  netmask 255.255.255.0

    - name: Bridge up
      shell: |
        if [ -d /sys/class/net/virbr0 ]; then
            exit 99
        else
            ifup virbr0 || exit $?
            systemctl restart dnsmasq || exit $?
        fi
      register: virbr0_up
      failed_when: virbr0_up.rc != 0 and virbr0_up.rc != 99
      changed_when: virbr0_up.rc != 99

    - name: Restart DNS server B
      service:
        name: dnsmasq
        state: restarted
      when: virbr0_up.changed

    - name: Config firewall
      template:
        src: "./templates/nftables.conf"
        dest: "/etc/nftables.conf"
        owner: root
        mode: "0644"
      register: firewall_conf

    - name: Start firewall
      systemd:
        name: nftables
        enabled: true
        state: started
      register: firewall_start

    - name: Reload firewall
      systemd:
        name: nftables
        state: reloaded
      when: firewall_conf.changed and (not firewall_start.changed)

    - name: Create LXC template debian-pv
      shell: |
        if ! sed 's/iface eth0 inet dhcp/iface eth0 inet manual/' /usr/share/lxc/templates/lxc-debian > /tmp/lxc-debian-pv; then
            rm -f /tmp/lxc-debian-pv
            exit 1
        fi
        if cmp -s /tmp/lxc-debian-pv /usr/share/lxc/templates/lxc-debian-pv; then
            rm -f /tmp/lxc-debian-pv
            exit 99
        fi
        if ! cp /tmp/lxc-debian-pv /usr/share/lxc/templates/lxc-debian-pv; then
            rm -f /tmp/lxc-debian-pv
            exit 1
        fi
        rm -f /tmp/lxc-debian-pv
        chmod 0755 /usr/share/lxc/templates/lxc-debian-pv || exit $?
      register: lxc_template_pv
      failed_when: lxc_template_pv.rc != 0 and lxc_template_pv.rc != 99
      changed_when: lxc_template_pv.rc != 99

    - name: Transition container ssh key
      copy:
        dest: "/opt/trans.pub"
        content: "{{ lookup('file', '~/.ssh/id_ed25519.pub') }}"

    - name: Create container sync
      environment:
        http_proxy: http://deb-proxy.c6.pvision:8000
      lxc_container:
        name: "{{ item.name }}"
        container_log: true
        template: debian-pv
        state: started
        template_options: --release="{{ item.release }}" --packages=sudo,python3-minimal,python3-apt,libpython3-stdlib --auth-key=/opt/trans.pub
        container_config:
          - "lxc.net.0.ipv4.gateway = 192.168.{{ sync_net_ip_base }}.1"
          - "lxc.net.0.ipv4.address = 192.168.{{ sync_net_ip_base }}.{{ item.ip }}/24"
          - "lxc.hook.pre-start = /usr/local/bin/lxc-hooks.sh"
          - "lxc.hook.mount = /usr/local/bin/lxc-hooks.sh"
          - "lxc.hook.start-host = /usr/local/bin/lxc-hooks.sh"
          - "lxc.hook.post-stop = /usr/local/bin/lxc-hooks.sh"
          - "lxc.mount.entry = /mnt/shared/run0 mnt/shared/run none bind,create=dir 0 0"
          - "{{ '# ' if not item.use_fast }}lxc.mount.entry = /mnt/fast/vol0/{{ item.name }} mnt/fast none bind,create=dir 0 0"
          - "{{ '# ' if not item.use_big }}lxc.mount.entry = /mnt/big/vol0/{{ item.name }} mnt/big none bind,create=dir 0 0"
      loop:
        - name: sync
          ip: 10
          release: bullseye
          use_fast: "{{ sync_hd_fast is defined }}"
          use_big: "{{ sync_hd_big is defined }}"
        - name: sync-f
          ip: 11
          release: buster
          use_fast: false
          use_big: false

    - name: Add sync to container inventory
      add_host:
        name: "sync.{{ hostvars[item].sync_int_dom }}"
        group: container_sync

        sync_use_fast:  "{{ hostvars[item].sync_hd_fast is defined }}"
        sync_use_big:  "{{ hostvars[item].sync_hd_big is defined }}"

        sync_int_dom: "{{ hostvars[item].sync_int_dom }}"
        sync_net_ip_base: "{{ hostvars[item].sync_net_ip_base }}"

        sync_pub_dom_sync: "sync.{{ hostvars[item].sync_pub_dom }}"
        sync_pub_dom_sync_f: "sync-f.{{ hostvars[item].sync_pub_dom }}"

        sync_pub_prefix: "https://sync.{{ hostvars[item].sync_pub_dom }}"
        sync_pub_prefix_f: "https://sync-f.{{ hostvars[item].sync_pub_dom }}"

        ansible_ssh_extra_args: "-J root@{{ hostvars[item].sync_int_dom }} -o 'RemoteForward 80 vc.pvision:80'"
        ansible_scp_extra_args: "-J root@{{ hostvars[item].sync_int_dom }}"
        ansible_sftp_extra_args: "-J root@{{ hostvars[item].sync_int_dom }}"

      loop: "{{ groups['sync'] }}"
      changed_when: false #!?
      tags:
        - fast

    - name: Add sync-f to container inventory
      add_host:
        name: "sync-f.{{ hostvars[item].sync_int_dom }}"
        group: container_sync_f

        sync_int_dom: "{{ hostvars[item].sync_int_dom }}"
        sync_net_ip_base: "{{ hostvars[item].sync_net_ip_base }}"

        sync_pub_dom_sync: "sync.{{ hostvars[item].sync_pub_dom }}"
        sync_pub_dom_sync_f: "sync-f.{{ hostvars[item].sync_pub_dom }}"

        sync_pub_prefix: "https://sync.{{ hostvars[item].sync_pub_dom }}"
        sync_pub_prefix_f: "https://sync-f.{{ hostvars[item].sync_pub_dom }}"

        ansible_ssh_extra_args: "-J root@{{ hostvars[item].sync_int_dom }} -o 'RemoteForward 50022 gitorious.pvision:22' -o 'RemoteForward 12345 {{ sync_f_clone_host }}:12345'"
        ansible_scp_extra_args: "-J root@{{ hostvars[item].sync_int_dom }}"
        ansible_sftp_extra_args: "-J root@{{ hostvars[item].sync_int_dom }}"

      loop: "{{ groups['sync'] }}"
      changed_when: false #!?

    - name: Add virbr address to hosts
      lineinfile:
        dest: /etc/hosts
        regexp: '.*virbr.alias$'
        line: "192.168.{{ sync_net_ip_base }}.1 virbr.alias"
        state: present

    - name: Add www-admin user
      user:
        name: www-admin
        group: www-data
        shell: /bin/bash

    - name: Install python cryptography
      apt:
        name: [python3-cryptography]
        state: present
        install_recommends: false

    - name: Lets encrypt work dir
      file:
        path: "{{ item }}"
        state: directory
        owner: www-admin
        group: www-data
        mode: 0750
      loop: ["/var/lib/acme", "/var/lib/acme/domains"]

    - name: Generate Lets encrypt Diffie-Hellman parameters
      openssl_dhparam:
        path: /var/lib/acme/dhparam.pem
        owner: www-admin
        group: www-data
        mode: 0640

    - name: Generate Lets encrypt account key
      openssl_privatekey:
        path: /var/lib/acme/account.key
        size: 4096
        owner: www-admin
        group: www-data
        mode: 0640

    - name: Lets encrypt challenges dir
      file:
        path: /var/www/challenges
        state: directory
        owner: www-admin
        group: www-data
        mode: 0770

    - name: Install Lets encrypt update script
      copy:
        src: "./templates/lets-encrypt-update.sh"
        dest: "/usr/local/bin/lets-encrypt-update.sh"
        owner: root
        mode: "0755"

    - name: Add public host name to Lets encrypt list
      lineinfile:
        dest: /usr/local/etc/lets-encrypt-hosts
        line: "{{ item }}.{{ sync_pub_dom }}"
        create: true
        state: present
      loop: ["sync", "sync-f"]

    - name: Install http server
      apt:
        name: [nginx, libnginx-mod-http-echo, acme-tiny]
        state: present
        install_recommends: false

    - name: Remove default site
      file:
        dest: /etc/nginx/sites-enabled/default
        state: absent
      notify:
        - Restart nginx

    - name: Dummy ssl dir
      file:
        path: /etc/nginx/ssl/0term
        state: directory
      notify:
        - Restart nginx

    - name: Dummy ssl cert
      copy:
        src: "./templates/0term.crt"
        dest: /etc/nginx/ssl/0term/0term.crt
      notify:
        - Restart nginx

    - name: Dummy ssl key
      copy:
        src: "./templates/0term.key"
        dest: /etc/nginx/ssl/0term/0term.key
      notify:
        - Restart nginx

    - name: Dummy ssl config
      template:
        src: "./templates/0term"
        dest: /etc/nginx/sites-available/0term
      notify:
        - Restart nginx

    - name: Dummy ssl config link
      file:
        src: /etc/nginx/sites-available/0term
        dest: /etc/nginx/sites-enabled/0term
        state: link
      notify:
        - Restart nginx

    - name: Lets encrypt ssl dir
      file:
        path: /etc/nginx/ssl/letsencrypt
        state: directory

    - name: sync config
      template:
        src: "./templates/sync"
        dest: /etc/nginx/sites-available/sync
      notify:
        - Restart nginx

    - name: sync config link
      file:
        src: /etc/nginx/sites-available/sync
        dest: /etc/nginx/sites-enabled/sync
        state: link
      notify:
        - Restart nginx

    - name: Config Nginx log format
      copy:
        dest: "/etc/nginx/conf.d/log-format.conf"
        owner: root
        mode: "0644"
        content: |
          log_format timed_combined '$remote_addr - $remote_user [$time_local] '
              '"$request" $status $body_bytes_sent '
              '"$http_referer" "$http_user_agent" '
              '$request_time $upstream_response_time';
      notify:
        - Restart nginx

    - name: sync-f config
      template:
        src: "./templates/sync-f"
        dest: /etc/nginx/sites-available/sync-f
      notify:
        - Restart nginx

    - name: sync-f config link
      file:
        src: /etc/nginx/sites-available/sync-f
        dest: /etc/nginx/sites-enabled/sync-f
        state: link
      notify:
        - Restart nginx

  handlers:
    - name: Restart nginx
      service:
        name: nginx
        state: reloaded

- hosts: container_sync

  vars:
    ansible_ssh_user: root
    ansible_host_key_checking: false

  pre_tasks:

    - name: Config resolv.conf
      copy:
        dest: "/etc/resolv.conf"
        owner: root
        mode: "0644"
        content: |
          domain {{ sync_int_dom }}
          search {{ sync_int_dom }}.
          nameserver 192.168.{{ sync_net_ip_base }}.1

    - name: Admin user
      user:
        name: admin
        shell: /bin/bash
        groups: adm,sudo,cdrom,floppy,audio,dip,video,plugdev,netdev
        append: true

  roles:
    - common

  tasks:

    - name: Install auxiliary programs
      apt:
        name: [less, iputils-ping, net-tools, dnsutils, netcat, wget, curl, nullmailer, cron, logrotate]
        state: present
        install_recommends: false

    - name: Install DVCS
      apt:
        name: [mercurial]
        state: present
        install_recommends: false

    - name: Install PHP packages
      apt:
        name: php-bcmath, php-common, php-curl, php-fpm, php-interbase, php-mbstring, php-zip, php-yac
        state: present
        install_recommends: false

    - name: Install Firebird SQL
      apt:
        name: [firebird3.0-server]
        state: present
        install_recommends: false

    - name: Config Firebird SQL UDF access
      lineinfile:
        path: /etc/firebird/3.0/firebird.conf
        regexp: '^\s*UdfAccess'
        line: 'UdfAccess = Restrict UDF'
      register: fb_config_udf

    - name: Config Firebird SQL bind address
      lineinfile:
        path: /etc/firebird/3.0/firebird.conf
        regexp: '^\s*RemoteBindAddress'
        line: 'RemoteBindAddress = 0.0.0.0'
      register: fb_config_bind

    - name: Config Firebird SQL admin user A
      lineinfile:
        path: /etc/firebird/3.0/SYSDBA.password
        regexp: '^\s*ISC_PASSWORD'
        line: 'ISC_PASSWORD="{{ sync_fb_password }}"'

    - name: Config Firebird SQL admin user B
      shell: |
        gsec -user SYSDBA -password '{{ sync_fb_password }}' -display SYSDBA
        gsec_rc="$?"
        if [ "$gsec_rc" -eq 0 ]; then
            exit 99
        fi
        if [ "$gsec_rc" -ne 15 ]; then
            exit "$gsec_rc"
        fi
        service firebird3.0 stop || exit "$?"
        echo "create or alter user sysdba password '{{ sync_fb_password }}';" | isql-fb -user sysdba /var/lib/firebird/3.0/system/security3.fdb || exit "$?"
        service firebird3.0 start || exit "$?"
      register: fb_admin_config_b
      failed_when: fb_admin_config_b.rc != 0 and fb_admin_config_b.rc != 99
      changed_when: fb_admin_config_b.rc != 99

    - name: Config Firebird SQL reporter user
      shell: |
        disp=$(gsec -user SYSDBA -password '{{ sync_fb_password }}' -display REPORTER)
        gsec_rc="$?"
        if [ "$gsec_rc" -ne 0 ]; then
            exit "$gsec_rc"
        fi
        if [ -n "$disp" ]; then
            gsec -user REPORTER -password '{{ sync_fb_reporter_password }}' -display REPORTER
            gsec_rc="$?"
            if [ "$gsec_rc" -eq 0 ]; then
                exit 99
            fi
            if [ "$gsec_rc" -ne 15 ]; then
                exit "$gsec_rc"
            fi
            gsec -user SYSDBA -password '{{ sync_fb_password }}' -mo REPORTER -pw '{{ sync_fb_reporter_password }}'
            exit "$?"
        fi
        gsec -user SYSDBA -password '{{ sync_fb_password }}' -add REPORTER -pw '{{ sync_fb_reporter_password }}' || exit "$?"
      register: fb_reporter_config
      failed_when: fb_reporter_config.rc != 0 and fb_reporter_config.rc != 99
      changed_when: fb_reporter_config.rc != 99

    - name: Add group pws-sync
      group:
        name: pws-sync
        gid: 801
        system: true
        state: present

    - name: Add admin to pws-sync
      user:
        name: admin
        groups: pws-sync
        append: true

    - name: Add www-data to pws-sync
      user:
        name: www-data
        groups: pws-sync
        append: true
      register: www_config_system_user

    - name: Add firebird to pws-sync
      user:
        name: firebird
        groups: pws-sync
        append: true
      register: fb_config_system_user

    - name: Add www-admin to pws-sync
      user:
        name: www-admin
        group: www-data
        groups: pws-sync
        shell: /bin/bash
        append: true

    - name: Restart PHP FPM
      service:
        name: "php{{ sync_php_ver }}-fpm"
        state: restarted
      when: www_config_system_user.changed

    - name: Restart Firebird SQL
      service:
        name: firebird3.0
        state: restarted
      when: fb_config_system_user.changed or fb_config_udf.changed or fb_config_bind.changed

    - name: Creates sync app directory
      file:
        path: /var/www/sync
        state: directory
        owner: www-admin
        group: www-data
        mode: 0755

    - name: Creates sync directories
      file:
        path: "{{ item.name }}"
        owner: "{{ item.owner }}"
        group: pws-sync
        mode: u=rwx,g=rwxs,o=rx
        state: directory
      loop:
        - name: /opt/sync
          owner: www-admin
        - name: /opt/sync/bin
          owner: www-admin
        - name: /opt/sync/etc
          owner: www-admin
        - name: /opt/sync/log
          owner: www-admin
        - name: /opt/sync/db-replica
          owner: firebird
        - name: /opt/sync/replica-incoming
          owner: www-admin
        - name: /opt/sync/replica-outgoing
          owner: www-admin
        - name: /var/tmp/pws_sync
          owner: www-admin

    - name: Create sync db directory
      file:
        path: /opt/sync/db
        owner: firebird
        group: pws-sync
        mode: u=rwx,g=rwxs,o=rx
        state: directory
      when: not sync_use_fast

    - name: Create sync backup directory
      file:
        path: /opt/sync/backup
        owner: firebird
        group: pws-sync
        mode: u=rwx,g=rwxs,o=rx
        state: directory
      when: not sync_use_big

    - name: Create fast sync db directory
      file:
        path: /mnt/fast/db
        owner: firebird
        group: pws-sync
        mode: u=rwx,g=rwxs,o=rx
        state: directory
      when: sync_use_fast

    - name: Create fast sync db link
      file:
        src: /mnt/fast/db
        dest: /opt/sync/db
        state: link
      when: sync_use_fast

    - name: Create big sync backup directory
      file:
        path: /mnt/big/backup
        owner: firebird
        group: pws-sync
        mode: u=rwx,g=rwxs,o=rx
        state: directory
      when: sync_use_big

    - name: Create big sync backup link
      file:
        src: /mnt/big/backup
        dest: /opt/sync/backup
        state: link
      when: sync_use_big

    - name: Create sync db/template directory
      file:
        path: /opt/sync/db/template
        owner: firebird
        group: pws-sync
        mode: u=rwx,g=rwxs,o=rx
        state: directory

    - name: Configure message session daemon
      template:
        src: "./templates/msg-sessiond-config.json"
        dest: "/opt/sync/etc/msg-sessiond-config.json"
        owner: root
        mode: "0644"
      register: msd_conf

    - name: Copy message session daemon binary
      copy:
        src: "./bin/msg-sessiond"
        dest: "/opt/sync/bin/msg-sessiond"
        owner: root
        mode: "0755"

    - name: Install message session daemon service
      template:
        src: "./templates/msg-sessiond.service"
        dest: "/etc/systemd/system/msg-sessiond.service"
        owner: root
        mode: "0644"

    - name: Start message session daemon service
      systemd:
        name: msg-sessiond
        enabled: true
        state: started
      register: msd_start

    - name: Restart message session daemon service
      systemd:
        name:  msg-sessiond
        state: restarted
      when: msd_conf.changed and (not msd_start.changed)

    - name: Copy database template
      copy:
        src: "./bin/sync-db-template-{{ sync_db_ver }}.bk3"
        dest: "/opt/sync/db/template/sync-db-template-{{ sync_db_ver }}.bk3"
        owner: firebird
        mode: "0644"

    - name: Symlink to default database template
      file:
        src: "sync-db-template-{{ sync_db_ver }}.bk3"
        dest: "/opt/sync/db/template/std-latest.bk3"
        owner: firebird
        state: link

    - name: Clone sync app
      become: yes
      become_user: www-admin
      become_method: su
      hg:
        repo: "http://vedmed:{{ sync_hg_pass }}@vc.pvision.lo-forward/pws"
        dest: /var/www/sync

    - name: Config sync app
      template:
        src: "./templates/config_pws_sync.php"
        dest: "/var/www/sync/config_pws_sync.php"
        owner: www-admin
        group: www-data
        mode: "0644"
      tags:
        - fast

    - name: Create /opt/etc
      file:
        path: /opt/etc
        state: directory

    - name: Create /opt/bin
      file:
        path: /opt/bin
        state: directory

    ###

    - name: Copy notify-exec daemon binary
      copy:
        src: "./bin/notify-exec-d"
        dest: "/opt/bin/notify-exec-d"
        owner: root
        mode: "0755"

    - name: Config notify-exec daemon
      copy:
        dest: "/opt/etc/notify-exec.toml"
        owner: www-admin
        group: pws-sync
        mode: "0644"
        content: |
          unixsocket = "/mnt/shared/run/notify-exec.socket"
          exec = "/usr/bin/php"
          execargs = ["/var/www/sync/sync-replica-send-cmd.php"]
      register: notify_exec_config

    - name: Install notify-exec daemon
      template:
        src: "./templates/notify-exec-d.service"
        dest: "/etc/systemd/system/notify-exec-d.service"
        owner: root
        mode: "0644"

    - name: Start notify-exec service
      systemd:
        name: notify-exec-d
        enabled: true
        state: started
      register: notify_exec_start

    - name: Retart notify-exec service
      service:
        name: notify-exec-d
        state: restarted
      when: notify_exec_config.changed and (not notify_exec_start.changed)

    ### sync replica incoming watch

    - name: Config sync replica incoming watch daemon
      copy:
        dest: "/var/www/sync/replica-incoming-apply-config.inc"
        owner: www-admin
        group: pws-sync
        mode: "0644"
        content: |
          REPLICA_INCOMING_DIR=/opt/sync/replica-incoming

    - name: Install sync replica incoming watch daemon
      template:
        src: "./templates/sync-replica-incoming-watch.service"
        dest: "/etc/systemd/system/sync-replica-incoming-watch.service"
        owner: root
        mode: "0644"

    - name: Start sync replica incoming watch daemon
      systemd:
        name: sync-replica-incoming-watch.service
        enabled: true
        #state: started

    #

    - name: Install sync replica incoming watch path
      template:
        src: "./templates/sync-replica-incoming-watch.path"
        dest: "/etc/systemd/system/sync-replica-incoming-watch.path"
        owner: root
        mode: "0644"

    - name: Start sync replica incoming watch path
      systemd:
        name: sync-replica-incoming-watch.path
        enabled: true
        state: started

    ### sync replica incoming messages watch

    - name: Install sync replica incoming messages watch daemon
      template:
        src: "./templates/sync-replica-incoming-watch-messages.service"
        dest: "/etc/systemd/system/sync-replica-incoming-watch-messages.service"
        owner: root
        mode: "0644"

    - name: Start sync replica incoming messages watch daemon
      systemd:
        name: sync-replica-incoming-watch-messages.service
        enabled: true
        #state: started

    #

    - name: Install sync replica incoming messages watch path
      template:
        src: "./templates/sync-replica-incoming-watch-messages.path"
        dest: "/etc/systemd/system/sync-replica-incoming-watch-messages.path"
        owner: root
        mode: "0644"

    - name: Start sync replica incoming messages watch path
      systemd:
        name: sync-replica-incoming-watch-messages.path
        enabled: true
        state: started

    ### sync replica send watch

    - name: Install sync replica send watch daemon
      template:
        src: "./templates/sync-replica-send-watch.service"
        dest: "/etc/systemd/system/sync-replica-send-watch.service"
        owner: root
        mode: "0644"

    - name: Stop sync replica send watch daemon
      systemd:
        name: sync-replica-send-watch.service
        enabled: false
        state: stopped

    #

    - name: Install sync replica send watch path
      template:
        src: "./templates/sync-replica-send-watch.path"
        dest: "/etc/systemd/system/sync-replica-send-watch.path"
        owner: root
        mode: "0644"

    - name: Stop sync replica send watch path
      systemd:
        name: sync-replica-send-watch.path
        enabled: false
        state: stopped

########################################################################################

- hosts: container_sync_f

  vars:
    ansible_ssh_user: root
    ansible_host_key_checking: false
    sync_f_app_dir: "/var/www/bpsync_447"

  pre_tasks:

    - name: Config resolv.conf
      copy:
        dest: "/etc/resolv.conf"
        owner: root
        mode: "0644"
        content: |
          domain {{ sync_int_dom }}
          search {{ sync_int_dom }}.
          nameserver 192.168.{{ sync_net_ip_base }}.1

    - name: Admin user
      user:
        name: admin
        shell: /bin/bash
        groups: adm,sudo,cdrom,floppy,audio,dip,video,plugdev,netdev
        append: true

  roles:
    - common

  tasks:

    - name: Add www-admin user
      user:
        name: www-admin
        group: www-data
        shell: /bin/bash

    - name: Make www-admin ssh dir
      file:
        path: "/home/www-admin/.ssh"
        owner: www-admin
        mode: 0700
        state: directory

    - name: Copy www-admin ssh-keys
      copy:
        dest: "/home/www-admin/.ssh/{{ item }}"
        src: "./sec/{{ item }}"
        owner: www-admin
        mode: 0600
      loop: ["id_rsa", "id_rsa.pub"]

    - name: Install auxiliary programs
      apt:
        name: [less, iputils-ping, net-tools, dnsutils, netcat, wget, curl, nullmailer, cron, logrotate]
        state: present
        install_recommends: false

    - name: Install MariaDB SQL server
      apt:
        name: [mariadb-server, python3-pymysql]
        state: present
        install_recommends: false

    - name: Install PHP packages
      apt:
        name: [php, php-fpm, php-xml, php-mysql, php-curl, php-interbase, php-gmp, php-gd]
        state: present
        install_recommends: false

    - name: Install DVCS
      apt:
        name: [git]
        state: present
        install_recommends: false

    - name: Make sync-f app dir
      file:
        path: "{{ sync_f_app_dir }}"
        owner: www-admin
        group: www-data
        mode: 0755
        state: directory

    - name: Clone sync-f app
      become: yes
      become_user: www-admin
      become_method: su
      git:
        repo: "ssh://git@gitorious.pvision.lo-forward:50022/bp/bpws.git"
        version: prod2
        dest: "{{ sync_f_app_dir }}"
        accept_hostkey: true

    - name: Create sync-f work dirs
      file:
        path: "{{ sync_f_app_dir }}/var"
        owner: www-admin
        group: www-data
        mode: 0770
        state: directory

    - name: Config sync-f app
      template:
        src: "./templates/parameters.yml"
        dest: "{{ sync_f_app_dir }}/config/packages/parameters.yaml"
        owner: www-admin
        group: www-data
        mode: "0644"

    - name: Create bpsync database
      mysql_db:
        login_unix_socket: /var/run/mysqld/mysqld.sock
        name: bpsync
        state: present

    - name: Create bpsync admin user
      mysql_user:
        login_unix_socket: /var/run/mysqld/mysqld.sock
        name: bp
        password: "{{ sync_mysql_pass_bp }}"
        priv: 'bpsync.*:ALL'
        state: present

#    - name: Create bpsync replica user
#      mysql_user:
#        login_unix_socket: /var/run/mysqld/mysqld.sock
#        name: "'replication_user'@'%'"
#        password: "{{ sync_mysql_pass_replica }}"
#        priv: '*.*:REPLICATION SLAVE'
#        state: present

    - name: Check bpsync database content
      mysql_query:
        login_unix_socket: /var/run/mysqld/mysqld.sock
        login_db: bpsync
        query: "show tables like 'user'"
      register: bpsync_content

#    - name: Test
#      debug:
#        var: bpsync_content.rowcount

    - name: Dump bpsync database
      args:
        executable: /bin/bash
      shell: |
        prev=$(lsof -ti:12345)
        let retry=10
        while [[ -n "$prev" && "$retry" -gt 0 ]]; do
            let retry--
            kill $prev
            sleep 0.1
            prev=$(lsof -ti:12345)
        done
        if [[ -n "$prev" ]]; then
            exit 1
        fi
        fin=$(</proc/sys/kernel/random/uuid)
        (echo "$fin"; mysqldump --opt -uroot bpsync; echo; echo "$fin") | nc -w 15 -lp 12345 &
      delegate_to: "root@{{ sync_f_clone_host }}"
      when: bpsync_content.rowcount[0] < 1

    - name: Restore bpsync database
      shell: |
        nc 127.0.0.1 12345 | (read fin; awk '/^'"$fin"'$/ {exit} {print $0}') | mysql -u bp -p"{{ sync_mysql_pass_bp }}" bpsync
      when: bpsync_content.rowcount[0] < 1

    - name: Cleanup bpsync dump
      args:
        executable: /bin/bash
      shell: |
        prev=$(lsof -ti:12345)
        let retry=10
        while [[ -n "$prev" && "$retry" -gt 0 ]]; do
            let retry--
            kill $prev
            sleep 0.1
            prev=$(lsof -ti:12345)
        done
      delegate_to: "root@{{ sync_f_clone_host }}"
      when: bpsync_content.rowcount[0] < 1

    - name: Create /opt/bin dir
      file:
        path: /opt/bin
        state: directory

    - name: Create script for reset replica slave
      template:
        src: "./templates/sync-to-slave.sh"
        dest: "/opt/bin/sync-to-slave.sh"
        owner: root
        mode: "0755"
